// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"
	client2 "github.com/cloudwego/kitex/client"
	"hz-server/kitex_gen/student/management"
	"hz-server/kitex_gen/student/management/studentmanagement"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "hz-server/biz/model/api"
)

// QueryStudent .
// @router student/query [GET]
func QueryStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.QueryStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	client, err := studentmanagement.NewClient("student", client2.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}

	reqRpc := &management.QueryStudentRequest{
		Num: fmt.Sprintf("%d", req.Num),
	}

	respRpc, err := client.QueryStudent(ctx, reqRpc)
	if err != nil {
		panic(err)
	}

	if !respRpc.Exist {
		resp := &api.QueryStudentResponse{
			Msg: fmt.Sprintf("don't have the num: %d", req.Num),
		}
		c.JSON(200, resp)
		return
	}

	resp := &api.QueryStudentResponse{
		Num:    respRpc.Num,
		Name:   respRpc.Name,
		Gender: respRpc.Gender,
	}
	c.JSON(consts.StatusOK, resp)
}

// InsertStudent .
// @router student/insert [POST]
func InsertStudent(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InsertStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	client, err := studentmanagement.NewClient("student", client2.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}

	reqRpc := &management.InsertStudentRequest{
		Num:    req.Num,
		Name:   req.Name,
		Gender: req.Gender,
	}

	respRpc, err := client.InsertStudent(ctx, reqRpc)
	if err != nil {
		panic(err)
	}

	if !respRpc.Ok {
		resp := api.InsertStudentResponse{
			Ok:  false,
			Msg: respRpc.Msg,
		}
		c.JSON(200, resp)
		return
	}

	resp := api.InsertStudentResponse{
		Ok:  true,
		Msg: respRpc.Msg,
	}

	c.JSON(consts.StatusOK, resp)
}
